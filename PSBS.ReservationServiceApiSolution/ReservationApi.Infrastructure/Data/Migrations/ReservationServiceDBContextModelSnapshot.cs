// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReservationApi.Infrastructure.Data;

#nullable disable

namespace ReservationApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ReservationServiceDBContext))]
    partial class ReservationServiceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReservationApi.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("booking_Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_Id");

                    b.Property<string>("BookingCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("booking_Code");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("bookingDate");

                    b.Property<Guid>("BookingStatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingStatus_Id");

                    b.Property<Guid>("BookingTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingType_Id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createAt");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("paymentType_Id");

                    b.Property<Guid?>("PointRuleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pointRule_Id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("totalAmount");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("voucher_Id");

                    b.Property<bool>("isPaid")
                        .HasColumnType("bit")
                        .HasColumnName("isPaid");

                    b.HasKey("BookingId");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("BookingTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PointRuleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ReservationApi.Domain.Entities.BookingStatus", b =>
                {
                    b.Property<Guid>("BookingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingStatus_Id");

                    b.Property<string>("BookingStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bookingStatus_name");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BookingStatusId");

                    b.ToTable("BookingStatuses");

                    b.HasData(
                        new
                        {
                            BookingStatusId = new Guid("b4e31140-5821-4cb5-91e4-e7e37447c149"),
                            BookingStatusName = "Pending",
                            isDeleted = false
                        },
                        new
                        {
                            BookingStatusId = new Guid("43bd1908-269d-4c36-9331-2f5bd3f122e6"),
                            BookingStatusName = "Processing",
                            isDeleted = false
                        },
                        new
                        {
                            BookingStatusId = new Guid("dd58afa1-9a28-48d7-8e0a-f8f57673e414"),
                            BookingStatusName = "Cancelled",
                            isDeleted = false
                        },
                        new
                        {
                            BookingStatusId = new Guid("8aa86749-70e9-450d-a07d-cddf99a6b907"),
                            BookingStatusName = "Confirmed",
                            isDeleted = false
                        },
                        new
                        {
                            BookingStatusId = new Guid("d61d1d84-677c-44d9-a3ca-27f12b4700ab"),
                            BookingStatusName = "Checked in",
                            isDeleted = false
                        },
                        new
                        {
                            BookingStatusId = new Guid("7715b1e9-db4d-4c94-a473-244d80ce3967"),
                            BookingStatusName = "Checked out",
                            isDeleted = false
                        },
                        new
                        {
                            BookingStatusId = new Guid("869e1f2b-720b-4918-af38-0774bc5dd801"),
                            BookingStatusName = "Completed",
                            isDeleted = false
                        },
                        new
                        {
                            BookingStatusId = new Guid("c4810046-d3cd-4605-b6e4-7a19467289aa"),
                            BookingStatusName = "Refunded",
                            isDeleted = false
                        },
                        new
                        {
                            BookingStatusId = new Guid("7a4d1ad4-93d5-4bb6-86d7-c9f144b3c483"),
                            BookingStatusName = "Rejected",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("ReservationApi.Domain.Entities.BookingType", b =>
                {
                    b.Property<Guid>("BookingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingType_Id");

                    b.Property<string>("BookingTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bookingTpye_name");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BookingTypeId");

                    b.ToTable("BookingTypes");

                    b.HasData(
                        new
                        {
                            BookingTypeId = new Guid("bcbff413-9722-47f2-8f89-3f57e4b966fd"),
                            BookingTypeName = "Service",
                            isDeleted = false
                        },
                        new
                        {
                            BookingTypeId = new Guid("4d6bda18-8229-4696-9783-9c1f6563da77"),
                            BookingTypeName = "Hotel",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("ReservationApi.Domain.Entities.PaymentType", b =>
                {
                    b.Property<Guid>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("paymentType_Id");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("paymentType_name");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeId = new Guid("d822f0fb-a4a5-42b3-a26a-5df67754f782"),
                            PaymentTypeName = "VNPay",
                            isDeleted = false
                        },
                        new
                        {
                            PaymentTypeId = new Guid("7780685e-084f-481d-8aa2-11e1cb73b1fa"),
                            PaymentTypeName = "COD",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("ReservationApi.Domain.Entities.PointRule", b =>
                {
                    b.Property<Guid>("PointRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pointRule_Id");

                    b.Property<int>("PointRuleRatio")
                        .HasColumnType("int")
                        .HasColumnName("pointRuleRatio");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("PointRuleId");

                    b.ToTable("PointRules");
                });

            modelBuilder.Entity("ReservationApi.Domain.Entities.Booking", b =>
                {
                    b.HasOne("ReservationApi.Domain.Entities.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationApi.Domain.Entities.BookingType", "BookingType")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationApi.Domain.Entities.PaymentType", "PaymentType")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationApi.Domain.Entities.PointRule", "PointRule")
                        .WithMany("Bookings")
                        .HasForeignKey("PointRuleId");

                    b.Navigation("BookingStatus");

                    b.Navigation("BookingType");

                    b.Navigation("PaymentType");

                    b.Navigation("PointRule");
                });

            modelBuilder.Entity("ReservationApi.Domain.Entities.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ReservationApi.Domain.Entities.BookingType", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ReservationApi.Domain.Entities.PaymentType", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ReservationApi.Domain.Entities.PointRule", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
