// <auto-generated />
using System;
using FacilityServiceApi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FacilityServiceApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FacilityServiceDbContext))]
    [Migration("20241229133157_migration001")]
    partial class migration001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.Camera", b =>
                {
                    b.Property<Guid>("cameraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("camera_id");

                    b.Property<string>("cameraCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("camera_code");

                    b.Property<string>("cameraStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("camera_status");

                    b.Property<string>("cameraType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("camera_type");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.HasKey("cameraId");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("roomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("hasCamera")
                        .HasColumnType("bit")
                        .HasColumnName("has_camera");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("roomImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("room_image");

                    b.Property<Guid>("roomTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roomType_id");

                    b.Property<bool>("status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("roomId");

                    b.HasIndex("roomTypeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.RoomType", b =>
                {
                    b.Property<Guid>("roomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roomType_id");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<decimal>("pricePerDay")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("pricePerDay");

                    b.Property<decimal>("pricePerHour")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("pricePerHour");

                    b.HasKey("roomTypeId");

                    b.ToTable("RoomType");

                    b.HasData(
                        new
                        {
                            roomTypeId = new Guid("a6f9a846-212a-4c5a-b39f-bc0ecfef023f"),
                            description = "Small room for small pets",
                            isDeleted = false,
                            name = "Small Room",
                            pricePerDay = 400.00m,
                            pricePerHour = 50.00m
                        },
                        new
                        {
                            roomTypeId = new Guid("d34d32d7-1e8a-4a55-bef9-8725b084b1b6"),
                            description = "Medium room for medium-sized pets",
                            isDeleted = false,
                            name = "Medium Room",
                            pricePerDay = 600.00m,
                            pricePerHour = 80.00m
                        },
                        new
                        {
                            roomTypeId = new Guid("58d5fd73-6017-4b8d-b52a-053b49d8c1be"),
                            description = "Large room for large pets",
                            isDeleted = false,
                            name = "Large Room",
                            pricePerDay = 1000.00m,
                            pricePerHour = 120.00m
                        });
                });

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("serviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("service_id");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createAt");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("serviceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_description");

                    b.Property<string>("serviceImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_Image");

                    b.Property<string>("serviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_name");

                    b.Property<Guid>("serviceTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("serviceType_id");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateAt");

                    b.HasKey("serviceId");

                    b.HasIndex("serviceTypeId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("serviceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("serviceType_id");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createAt");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type_name");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateAt");

                    b.HasKey("serviceTypeId");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.ServiceVariant", b =>
                {
                    b.Property<Guid>("serviceVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("serviceVariant_id");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createAt");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("serviceContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_content");

                    b.Property<Guid>("serviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("service_id");

                    b.Property<decimal>("servicePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("service_price");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateAt");

                    b.HasKey("serviceVariantId");

                    b.HasIndex("serviceId");

                    b.ToTable("ServiceVariant");
                });

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.Room", b =>
                {
                    b.HasOne("FacilityServiceApi.Domain.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("roomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.Service", b =>
                {
                    b.HasOne("FacilityServiceApi.Domain.Entities.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("serviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.ServiceVariant", b =>
                {
                    b.HasOne("FacilityServiceApi.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FacilityServiceApi.Domain.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
